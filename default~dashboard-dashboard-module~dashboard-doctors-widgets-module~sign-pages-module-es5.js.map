{"version":3,"sources":["webpack:///src/app/services/api.service.ts","webpack:///src/app/services/ng-recaptcha3.service.ts"],"names":["ApiService","http","authService","router","recaptcha3","siteKey","init","method","url","data","incodeURL","incodedData","post","apiheader","toPromise","httpResponse","put","get","formParams","_httpRequest","response","_requestJson","authData","tokenDataArray","accessToken","errorMessage","isOK","setToken","AccessToken","getAccessToken","tokenData","_accessTokenCurrentTime","Date","_accessTokenExpTime","TokenExpAfter","Math","floor","getTime","header","append","headers","toUrlEncoded","obj","Object","keys","map","k","encodeURIComponent","join","username","password","params","email","console","log","requestAuthResponse","captcha","deviceID","getDeviceID","question","answer","channel","resetCode","newPassword","lastname","dob","id","_page","_pageSize","urlparams","urlparams1","urlparams2","providedIn","NgRecaptcha3Service","baseUrl","isLoaded","window","scriptId","action","execute","e","Promise","resolve","reject","script","document","createElement","innerHTML","src","async","defer","onload","onerror","head","appendChild","getElementById","remove","badge","getElementsByClassName"],"mappings":"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","file":"default~dashboard-dashboard-module~dashboard-doctors-widgets-module~sign-pages-module-es5.js","sourcesContent":["import { Injectable, OnInit } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { AuthService } from './auth.service';\nimport { baseUrl, headers } from 'environments/environment';\nimport { NgRecaptcha3Service } from './ng-recaptcha3.service';\nimport { Router } from '@angular/router';\nimport jwt_decode from 'jwt-decode';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ApiService implements OnInit{\n  incodeURL: any;\n  apiheader: any;\n  httpResponse: any;\n  private siteKey     = '6LdhHnodAAAAANT35rUOPEZ0TnF31D6qOqSfby81';\n  \n\n  constructor(private http: HttpClient, \n    private authService: AuthService, \n    private router: Router, \n    private recaptcha3: NgRecaptcha3Service,\n    ) { }\n\n  ngOnInit(){\n    this.recaptcha3.init(this.siteKey);\n  }\n\n\n   /**\n   * Create API request method function.\n   * And convert data into the encoded form data.\n   * Convert api request to the POST, GET, and PUT method.\n   * And take baseURL, incodedData, and header.\n   */\n  async _httpRequest(method: string,url: string, data) {\n  \n  // if (withAuth) {\n  //     if(this.checkAccessToken()){\n  //     }else{\n  //       this.router.navigate(['login'])\n  //     }\n  //   }else{\n  //     this.apiheader = this.Header();\n  //   }\n    \n    if(data){\n    this.incodeURL = this.incodedData(data)\n    }\n    if(method =='post'){\n\t\t  try{\n\t\t  this.httpResponse =  await this.http.post(`${baseUrl}${url}`, this.incodeURL, this.apiheader).toPromise()\n\t\t  } catch (e) {\n\t\t  this.httpResponse = e\n\t\t  }\n    \n    }else if(method =='put'){\n\t\t  try{\n\t\t  this.httpResponse =  await this.http.put(`${baseUrl}${url}`, this.incodeURL, this.apiheader).toPromise()\n\t\t  } catch (e) {\n\t\t  this.httpResponse = e\n\t\t }\n   \n    }else{\n\t\ttry{\n\t\t  this.httpResponse =  await this.http.get(`${baseUrl}${url}`, this.apiheader).toPromise()\n\t\t } catch (e) {\n\t\t  this.httpResponse = e\n\t\t }\n    }\n    \n    \n    // if (withAuth && this.httpResponse.status == 401) {\n    //      return  this._httpRequest(method, url, data, withAuth);\n    // }else{\n    //     return this.httpResponse\n    // }\n   \n        \n    \n    \n\n  }\n\n   /**\n   * Request Json function\n   * convert data into JSON data.\n   * Pass Auth Permission and Form Parameter.\n   */\n  async _requestJson(method: string, url: string, formParams) {\n      let response = await this._httpRequest(method, url, formParams);\n      if (response == null) return null;\n        try {\n              return response;\n          } catch (e) {\n              return e\n          }\n        \n      }\n\n\n  /**\n   * Request Auth Response function\n   * Check Every has Auth permission or not.\n   * If Response is ok then Set Token, Refresh Token.\n   * And Save User Data.\n   */\n  async requestAuthResponse(method: string, url: string, formParams) {\n      var response = await this._requestJson(method, url, formParams);\n      if (response == null) return null;\n        try {\n          if (response.authData != null) {\n          var tokenDataArray = jwt_decode(response.authData.accessToken);\n            if(tokenDataArray['role'] !=30){\n              response.errorMessage= 'This application is only for Provider user accounts.'\n              response.isOK = false;\n              return response\n              }else{\n                this.authService.setToken(response.authData.accessToken)\n                // this.authService.setRefreshToken(response.authData.refreshToken)\n                // this.authService.setUser({\n                //   email: response.authData.email,\n                //   username: response.authData.username,\n                //   fullname: response.authData.fullName,\n                //   organizationName: response.authData.organizationName,\n                //   organizationAddress: response.authData.organizationAddress\n                // });\n            return response\n            }\n            \n          }else{\n        return response\n        }\n      \n      } catch (e) {\n      return e\n    } \n      \n      \n    }\n  \n  /**\n   * Check Access Token funtion\n   * Decode Access Token and take expiry time.\n   * Check if Access Token Expiry time will be left 5 seconds then Generate new one.\n   * And Generate RefreshToken\n   */\n  checkAccessToken(){\n    var AccessToken = this.authService.getAccessToken();\n    if(AccessToken){\n      var tokenData = jwt_decode(AccessToken);\n      var _accessTokenCurrentTime = new Date();\n      var _accessTokenExpTime = new Date(tokenData['exp'] * 1000);\n      var TokenExpAfter = Math.floor((_accessTokenExpTime.getTime() - _accessTokenCurrentTime.getTime())/ 1000) ;\n    \n    }else{\n        return false\n    }\n \n  }\n  \n  /**\n   * Refresh Access Token function\n   * Get Access Token, incodedData, and device Info from the LocalStorage.\n   * And Call POST API and pass headers, incodeData.\n   * And set Access Token, Refresh Token.\n   * If refresh Token expire and automcatically logout from the Current Session.\n   */\n  // refreshAccessToken(){\n  //   const url = 'jwtRefreshSessions';\n  //   var data = {'refreshToken': this.authService.getRefreshToken(), 'deviceID': this.authService.getDeviceID()};\n  //   const incodeURL = this.incodedData(data)\n  //    try{\n  //    return this.http.post<any>(`${baseUrl}${url}`, incodeURL, { headers: headers }).subscribe((result: any) => {\n  //     if(result.isOK){\n  //     \tthis.authService.setToken(result.authData.accessToken)\n  //       this.authService.setRefreshToken(result.authData.refreshToken)\n  //       this.apiheader = this.HeaderWithToken();\n  //    \treturn true;\n  //     }else{\n  //     \tthis.authService.logout();\n  //     \treturn false;\n  //     }\n  //   })\n    \n  //   } catch (e) {\n  //     this.authService.logout();\n  //     return false;\n  //  }\n    \n  // }\n  \n\n  //Header Token function\n  HeaderWithToken() {\n    let header = new HttpHeaders();\n    header = header.append('Authorization', 'Bearer ' + this.authService.getAccessToken());\n    return { headers: header };\n  }\n  \n  //Header function\n  Header() {\n    return { headers: headers };\n  }\n  \n  //Incodeed data function\n  incodedData(data){\n    const toUrlEncoded = obj => Object.keys(obj).map(\n      k => encodeURIComponent(k) + '=' + encodeURIComponent(obj[k])).join('&');\n      return(toUrlEncoded(data))\n  }\n\n  /**\n   * Sign in api function\n   * Pass username, password, and Captcha in the bodydata.\n   * Check Captcha ID is required or not. If required then add in the bodydata.\n   * Call Sign API and pass auth Permission and bodydata in the API.\n   */\n  async singIn(username:string, password:string){\n    let params ={\n        email :username,\n        password :password,\n      };\n      console.log(params, 'body')\n    return await this.requestAuthResponse('post', 'api/login', params)  \n      \n  }\n  \n  /**\n   * Forget password step1 API function\n   * Check entered username is valid or not if valid move on Step 2\n   * Check Captcha ID is required or not. If required then add in the bodydata.\n   * And Send device ID.\n   */\n   async forgotPasswordStep1(username:string,captcha:any){\n    let params ={\n        username :username,\n        deviceID : this.authService.getDeviceID()\n      };\n    if (captcha != null) params['captcha'] = captcha;\n    return await this.requestAuthResponse('post', 'users/forgotPassword/step1', params)  \n  }\n  \n  /**\n   * Forget password step2 API function\n   * Check entered Answer is valid or not if valid move on Step 3\n   * Check Captcha ID is required or not. If required then add in the bodydata.\n   * And Send device ID.\n   */\n  async forgotPasswordStep2(question:string,answer:string,captcha:any){\n    let params = {\n        question: question,\n        answer: answer,\n        deviceID : this.authService.getDeviceID()\n      };\n                    \n    if (captcha != null) params['captcha'] = captcha;\n    return await this.requestAuthResponse('post', 'users/forgotPassword/step2', params)  \n  }\n\n  /**\n   * Forget password step3 API function\n   * Check selected communication channel is valid or not if valid move on Step 4\n   * And Send device ID.\n   */\n  async forgotPasswordStep3(channel:string){\n    let params = {\n        channel: channel,\n        deviceID : this.authService.getDeviceID()\n      };\n    return await this.requestAuthResponse('post', 'users/forgotPassword/step3', params)  \n      \n  }\n  \n  /**\n   * Forget password step4 API function\n   * Check entered secret code is valid or not.\n   * Check entered password fulfill all validators if valid then Redirect to the Login Page.\n   * And Send device ID.\n   */\n  async forgotPasswordStep4(resetCode:string,newPassword:string){\n    let params = {\n        resetCode: resetCode,\n        newPassword: newPassword,\n        deviceID : this.authService.getDeviceID()\n      };\n    return await this.requestAuthResponse('post', 'users/forgotPassword/step4', params)  \n      \n  }\n\n  /**\n   * Username reminder API function\n   * Check entered email address is valid or not.\n   * And Send device ID.\n   * Check Captcha ID is required or not. If required then add in the bodydata.\n   */\n  async usernameReminder(email:string,captcha:any){\n    let params = {\n        deviceID : this.authService.getDeviceID()\n      };\n      if (captcha != null) params['captcha'] = captcha;\n    return await this.requestAuthResponse('post', '/users/'+email+'/emails/usernameReminder', params)  \n      \n  }\n  \n  \n  /**\n   * Search Member API function\n   * Check url parameter is not be blank.\n   * And Pass the ID, page, and page size in the API.\n   * And Call API and pass the bodydata.\n   */\n  async searchMember(lastname:string, dob:string, id:string, _page:any, _pageSize:any){\n    var urlparams = '';\n      if(id){\n        var urlparams = 'id='+id+'&_page='+_page+'&_pageSize='+_pageSize;\n      }else if(lastname && dob){\n        var urlparams = 'lastname=s:'+lastname+'&dob='+dob+'&_page='+_page+'&_pageSize='+_pageSize;\n      } \n      if(urlparams != ''){\n        return await this.requestAuthResponse('get', 'members?'+urlparams, false) \n      }else{\n        return null; \n      }\n      \n  }\n\n  /**\n   * Location Provider API function\n   * Check url parameter is not be blank.\n   * And Pass the ID, page, and page size in the API.\n   * And Call API and pass the bodydata.\n   */\n  async locationProvider(id:string, _page:any, _pageSize:any){\n    var urlparams1 = id+'&_page='+_page+'&_pageSize='+_pageSize;\n    return await this.requestAuthResponse('get', 'providers/current/locations?'+urlparams1, false)\n  }\n\n  /**\n   * Payment Provider API function\n   * And Pass the ID, page, and page size in the API.\n   * And Call API and pass the bodydata.\n   */\n  async paymentProvider(id:string, _page:any, _pageSize:any){\n    var urlparams2 = id+'&_page='+_page+'&_pageSize='+_pageSize;\n    return await this.requestAuthResponse('get', 'providers/current/payments?'+urlparams2, false)\n  }\n\n  /**\n   * Payment Provider details API function\n   * And Pass the ID, page, and page size in the API.\n   * And Call API and pass the bodydata.\n   */\n  async paymentProviderDetails(id:string){\n    return await this.requestAuthResponse('get', 'payments/'+id, false)\n  }\n\n}","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgRecaptcha3Service {\n  private baseUrl = 'https://www.google.com/recaptcha/api.js';\n  private siteKey = '';\n  private isLoaded: Boolean = false;\n  private scriptId;\n\n  constructor() { \n    window['ngRecaptcha3Loaded'] = () => {\n      this.isLoaded = true;\n    };\n    this.scriptId = +(new Date());\n  }\n\n  public getToken(action?: any): Promise<any> {\n    try {\n      return window['grecaptcha'].execute(this.siteKey, action);\n    } catch (e) {\n      return new Promise((resolve, reject) => {\n        reject(e);\n      });\n    }\n  }\n\n  public init(siteKey) {\n    return new Promise((resolve, reject) => {\n      if (this.isLoaded) {\n        resolve('success');\n        return;\n      } else {\n        this.siteKey = siteKey;\n        const script = document.createElement('script');\n        script.innerHTML = '';\n        script.src = this.baseUrl + `?render=${this.siteKey}&onload=ngRecaptcha3Loaded`;\n        script.id = `recapthcha-${this.scriptId}`;\n        script.async = true;\n        script.defer = true;\n        script.onload = () => {\n          resolve('success');\n        }\n        script.onerror = () => {\n          reject('error');\n        };\n        document.head.appendChild(script);\n      }\n\n    });\n\n  }\n\n  public destroy() {\n    this.isLoaded = false;\n      const script = document.getElementById(`recapthcha-${this.scriptId}`);\n      if (script) {\n        script.remove();\n      }\n      const badge = document.getElementsByClassName('grecaptcha-badge')[0];\n      if (badge) {\n        badge.remove();\n      }\n  \n    }\n\n}\n"]}