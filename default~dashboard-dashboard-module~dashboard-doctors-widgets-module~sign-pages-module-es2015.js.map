{"version":3,"sources":["./src/app/services/api.service.ts","./src/app/services/ng-recaptcha3.service.ts"],"names":[],"mappings":"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","file":"default~dashboard-dashboard-module~dashboard-doctors-widgets-module~sign-pages-module-es2015.js","sourcesContent":["import { Injectable, OnInit } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { AuthService } from './auth.service';\nimport { baseUrl, headers } from 'environments/environment';\nimport { NgRecaptcha3Service } from './ng-recaptcha3.service';\nimport { Router } from '@angular/router';\nimport jwt_decode from 'jwt-decode';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ApiService implements OnInit{\n  incodeURL: any;\n  apiheader: any;\n  httpResponse: any;\n  private siteKey     = '6LdhHnodAAAAANT35rUOPEZ0TnF31D6qOqSfby81';\n  \n\n  constructor(private http: HttpClient, \n    private authService: AuthService, \n    private router: Router, \n    private recaptcha3: NgRecaptcha3Service,\n    ) { }\n\n  ngOnInit(){\n    this.recaptcha3.init(this.siteKey);\n  }\n\n\n   /**\n   * Create API request method function.\n   * And convert data into the encoded form data.\n   * Convert api request to the POST, GET, and PUT method.\n   * And take baseURL, incodedData, and header.\n   */\n  async _httpRequest(method: string,url: string, data) {\n  \n  // if (withAuth) {\n  //     if(this.checkAccessToken()){\n  //     }else{\n  //       this.router.navigate(['login'])\n  //     }\n  //   }else{\n  //     this.apiheader = this.Header();\n  //   }\n    \n    if(data){\n    this.incodeURL = this.incodedData(data)\n    }\n    if(method =='post'){\n\t\t  try{\n\t\t  this.httpResponse =  await this.http.post(`${baseUrl}${url}`, this.incodeURL, this.apiheader).toPromise()\n\t\t  } catch (e) {\n\t\t  this.httpResponse = e\n\t\t  }\n    \n    }else if(method =='put'){\n\t\t  try{\n\t\t  this.httpResponse =  await this.http.put(`${baseUrl}${url}`, this.incodeURL, this.apiheader).toPromise()\n\t\t  } catch (e) {\n\t\t  this.httpResponse = e\n\t\t }\n   \n    }else{\n\t\ttry{\n\t\t  this.httpResponse =  await this.http.get(`${baseUrl}${url}`, this.apiheader).toPromise()\n\t\t } catch (e) {\n\t\t  this.httpResponse = e\n\t\t }\n    }\n    \n    \n    // if (withAuth && this.httpResponse.status == 401) {\n    //      return  this._httpRequest(method, url, data, withAuth);\n    // }else{\n    //     return this.httpResponse\n    // }\n   \n        \n    \n    \n\n  }\n\n   /**\n   * Request Json function\n   * convert data into JSON data.\n   * Pass Auth Permission and Form Parameter.\n   */\n  async _requestJson(method: string, url: string, formParams) {\n      let response = await this._httpRequest(method, url, formParams);\n      if (response == null) return null;\n        try {\n              return response;\n          } catch (e) {\n              return e\n          }\n        \n      }\n\n\n  /**\n   * Request Auth Response function\n   * Check Every has Auth permission or not.\n   * If Response is ok then Set Token, Refresh Token.\n   * And Save User Data.\n   */\n  async requestAuthResponse(method: string, url: string, formParams) {\n      var response = await this._requestJson(method, url, formParams);\n      if (response == null) return null;\n        try {\n          if (response.authData != null) {\n          var tokenDataArray = jwt_decode(response.authData.accessToken);\n            if(tokenDataArray['role'] !=30){\n              response.errorMessage= 'This application is only for Provider user accounts.'\n              response.isOK = false;\n              return response\n              }else{\n                this.authService.setToken(response.authData.accessToken)\n                // this.authService.setRefreshToken(response.authData.refreshToken)\n                // this.authService.setUser({\n                //   email: response.authData.email,\n                //   username: response.authData.username,\n                //   fullname: response.authData.fullName,\n                //   organizationName: response.authData.organizationName,\n                //   organizationAddress: response.authData.organizationAddress\n                // });\n            return response\n            }\n            \n          }else{\n        return response\n        }\n      \n      } catch (e) {\n      return e\n    } \n      \n      \n    }\n  \n  /**\n   * Check Access Token funtion\n   * Decode Access Token and take expiry time.\n   * Check if Access Token Expiry time will be left 5 seconds then Generate new one.\n   * And Generate RefreshToken\n   */\n  checkAccessToken(){\n    var AccessToken = this.authService.getAccessToken();\n    if(AccessToken){\n      var tokenData = jwt_decode(AccessToken);\n      var _accessTokenCurrentTime = new Date();\n      var _accessTokenExpTime = new Date(tokenData['exp'] * 1000);\n      var TokenExpAfter = Math.floor((_accessTokenExpTime.getTime() - _accessTokenCurrentTime.getTime())/ 1000) ;\n    \n    }else{\n        return false\n    }\n \n  }\n  \n  /**\n   * Refresh Access Token function\n   * Get Access Token, incodedData, and device Info from the LocalStorage.\n   * And Call POST API and pass headers, incodeData.\n   * And set Access Token, Refresh Token.\n   * If refresh Token expire and automcatically logout from the Current Session.\n   */\n  // refreshAccessToken(){\n  //   const url = 'jwtRefreshSessions';\n  //   var data = {'refreshToken': this.authService.getRefreshToken(), 'deviceID': this.authService.getDeviceID()};\n  //   const incodeURL = this.incodedData(data)\n  //    try{\n  //    return this.http.post<any>(`${baseUrl}${url}`, incodeURL, { headers: headers }).subscribe((result: any) => {\n  //     if(result.isOK){\n  //     \tthis.authService.setToken(result.authData.accessToken)\n  //       this.authService.setRefreshToken(result.authData.refreshToken)\n  //       this.apiheader = this.HeaderWithToken();\n  //    \treturn true;\n  //     }else{\n  //     \tthis.authService.logout();\n  //     \treturn false;\n  //     }\n  //   })\n    \n  //   } catch (e) {\n  //     this.authService.logout();\n  //     return false;\n  //  }\n    \n  // }\n  \n\n  //Header Token function\n  HeaderWithToken() {\n    let header = new HttpHeaders();\n    header = header.append('Authorization', 'Bearer ' + this.authService.getAccessToken());\n    return { headers: header };\n  }\n  \n  //Header function\n  Header() {\n    return { headers: headers };\n  }\n  \n  //Incodeed data function\n  incodedData(data){\n    const toUrlEncoded = obj => Object.keys(obj).map(\n      k => encodeURIComponent(k) + '=' + encodeURIComponent(obj[k])).join('&');\n      return(toUrlEncoded(data))\n  }\n\n  /**\n   * Sign in api function\n   * Pass username, password, and Captcha in the bodydata.\n   * Check Captcha ID is required or not. If required then add in the bodydata.\n   * Call Sign API and pass auth Permission and bodydata in the API.\n   */\n  async singIn(username:string, password:string){\n    let params ={\n        email :username,\n        password :password,\n      };\n      console.log(params, 'body')\n    return await this.requestAuthResponse('post', 'api/login', params)  \n      \n  }\n  \n  /**\n   * Forget password step1 API function\n   * Check entered username is valid or not if valid move on Step 2\n   * Check Captcha ID is required or not. If required then add in the bodydata.\n   * And Send device ID.\n   */\n   async forgotPasswordStep1(username:string,captcha:any){\n    let params ={\n        username :username,\n        deviceID : this.authService.getDeviceID()\n      };\n    if (captcha != null) params['captcha'] = captcha;\n    return await this.requestAuthResponse('post', 'users/forgotPassword/step1', params)  \n  }\n  \n  /**\n   * Forget password step2 API function\n   * Check entered Answer is valid or not if valid move on Step 3\n   * Check Captcha ID is required or not. If required then add in the bodydata.\n   * And Send device ID.\n   */\n  async forgotPasswordStep2(question:string,answer:string,captcha:any){\n    let params = {\n        question: question,\n        answer: answer,\n        deviceID : this.authService.getDeviceID()\n      };\n                    \n    if (captcha != null) params['captcha'] = captcha;\n    return await this.requestAuthResponse('post', 'users/forgotPassword/step2', params)  \n  }\n\n  /**\n   * Forget password step3 API function\n   * Check selected communication channel is valid or not if valid move on Step 4\n   * And Send device ID.\n   */\n  async forgotPasswordStep3(channel:string){\n    let params = {\n        channel: channel,\n        deviceID : this.authService.getDeviceID()\n      };\n    return await this.requestAuthResponse('post', 'users/forgotPassword/step3', params)  \n      \n  }\n  \n  /**\n   * Forget password step4 API function\n   * Check entered secret code is valid or not.\n   * Check entered password fulfill all validators if valid then Redirect to the Login Page.\n   * And Send device ID.\n   */\n  async forgotPasswordStep4(resetCode:string,newPassword:string){\n    let params = {\n        resetCode: resetCode,\n        newPassword: newPassword,\n        deviceID : this.authService.getDeviceID()\n      };\n    return await this.requestAuthResponse('post', 'users/forgotPassword/step4', params)  \n      \n  }\n\n  /**\n   * Username reminder API function\n   * Check entered email address is valid or not.\n   * And Send device ID.\n   * Check Captcha ID is required or not. If required then add in the bodydata.\n   */\n  async usernameReminder(email:string,captcha:any){\n    let params = {\n        deviceID : this.authService.getDeviceID()\n      };\n      if (captcha != null) params['captcha'] = captcha;\n    return await this.requestAuthResponse('post', '/users/'+email+'/emails/usernameReminder', params)  \n      \n  }\n  \n  \n  /**\n   * Search Member API function\n   * Check url parameter is not be blank.\n   * And Pass the ID, page, and page size in the API.\n   * And Call API and pass the bodydata.\n   */\n  async searchMember(lastname:string, dob:string, id:string, _page:any, _pageSize:any){\n    var urlparams = '';\n      if(id){\n        var urlparams = 'id='+id+'&_page='+_page+'&_pageSize='+_pageSize;\n      }else if(lastname && dob){\n        var urlparams = 'lastname=s:'+lastname+'&dob='+dob+'&_page='+_page+'&_pageSize='+_pageSize;\n      } \n      if(urlparams != ''){\n        return await this.requestAuthResponse('get', 'members?'+urlparams, false) \n      }else{\n        return null; \n      }\n      \n  }\n\n  /**\n   * Location Provider API function\n   * Check url parameter is not be blank.\n   * And Pass the ID, page, and page size in the API.\n   * And Call API and pass the bodydata.\n   */\n  async locationProvider(id:string, _page:any, _pageSize:any){\n    var urlparams1 = id+'&_page='+_page+'&_pageSize='+_pageSize;\n    return await this.requestAuthResponse('get', 'providers/current/locations?'+urlparams1, false)\n  }\n\n  /**\n   * Payment Provider API function\n   * And Pass the ID, page, and page size in the API.\n   * And Call API and pass the bodydata.\n   */\n  async paymentProvider(id:string, _page:any, _pageSize:any){\n    var urlparams2 = id+'&_page='+_page+'&_pageSize='+_pageSize;\n    return await this.requestAuthResponse('get', 'providers/current/payments?'+urlparams2, false)\n  }\n\n  /**\n   * Payment Provider details API function\n   * And Pass the ID, page, and page size in the API.\n   * And Call API and pass the bodydata.\n   */\n  async paymentProviderDetails(id:string){\n    return await this.requestAuthResponse('get', 'payments/'+id, false)\n  }\n\n}","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgRecaptcha3Service {\n  private baseUrl = 'https://www.google.com/recaptcha/api.js';\n  private siteKey = '';\n  private isLoaded: Boolean = false;\n  private scriptId;\n\n  constructor() { \n    window['ngRecaptcha3Loaded'] = () => {\n      this.isLoaded = true;\n    };\n    this.scriptId = +(new Date());\n  }\n\n  public getToken(action?: any): Promise<any> {\n    try {\n      return window['grecaptcha'].execute(this.siteKey, action);\n    } catch (e) {\n      return new Promise((resolve, reject) => {\n        reject(e);\n      });\n    }\n  }\n\n  public init(siteKey) {\n    return new Promise((resolve, reject) => {\n      if (this.isLoaded) {\n        resolve('success');\n        return;\n      } else {\n        this.siteKey = siteKey;\n        const script = document.createElement('script');\n        script.innerHTML = '';\n        script.src = this.baseUrl + `?render=${this.siteKey}&onload=ngRecaptcha3Loaded`;\n        script.id = `recapthcha-${this.scriptId}`;\n        script.async = true;\n        script.defer = true;\n        script.onload = () => {\n          resolve('success');\n        }\n        script.onerror = () => {\n          reject('error');\n        };\n        document.head.appendChild(script);\n      }\n\n    });\n\n  }\n\n  public destroy() {\n    this.isLoaded = false;\n      const script = document.getElementById(`recapthcha-${this.scriptId}`);\n      if (script) {\n        script.remove();\n      }\n      const badge = document.getElementsByClassName('grecaptcha-badge')[0];\n      if (badge) {\n        badge.remove();\n      }\n  \n    }\n\n}\n"],"sourceRoot":"webpack:///"}